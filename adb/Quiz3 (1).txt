
Name: Naag Sai Rishindra Popuri	
Last 4 digits ID:1001866373

CSE 6331, Cloud Computing					


Quiz Q3, Summer 2022   (c) DL, UTA, 2022


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     ______NP___________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

 10. Show a web page and interface (which resides on the cloud provider) with your 
     Student ID at the top and below that, your name, at the top of every web page dispayed 
     (for this quiz). Please use a large font.

 There is a table of voting in presidential elections by year, state, number of votes cast and party votes cast for,

    Using a web interface (web page) allow a user to give a range of years (for example 2012 to 2016) as well as a range of votes
    (for example 2000 to 200000), and you will show:
    (a) all states, years, votes and parties cast for, within both of those ranges.
    (b) also show the largest and smallest vote entries (year, state, number votes, party) within those ranges

{% extends "task1.html"%}
{% block content %}
{%if opt=='1'%}
<p align = center style=color:blue> Time taken to execute {{noq}} queries with SQL is {{toe}} secs</p>
<p align = center style=color:blue> {{count}} records found in the specified range</p>
<div align=center>
    {%block table%}
    <table border=1px solid #FF0000;>
        <caption><strong>Votes records</Strong></caption>
        <thead>
            <tr>
                <th scope="col">Year</th>
                <th scope="col">State</th>
                <th scope="col">Votes</th>
                <th scope="col">Party</th>
                
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
                <tr>
                    <td>{{ row[0] }}</td>
                    <td>{{ row[1] }}</td>
                    <td>{{ row[2] }}</td>
                    <td>{{ row[3] }}</td>
                    
                </tr>
            {% endfor %}
        </tbody>
        
    </table>
    <table border=1px solid #FF0000;>
        <caption><strong>Highest Votes </Strong></caption>
        <thead>
            <tr>
                <th scope="col">Year</th>
                <th scope="col">State</th>
                <th scope="col">Votes</th>
                <th scope="col">Party</th>
                
            </tr>
        </thead>
        <tbody>
            {% for row in data1 %}
                <tr>
                    <td>{{ row[0] }}</td>
                    <td>{{ row[1] }}</td>
                    <td>{{ row[2] }}</td>
                    <td>{{ row[3] }}</td>
                    
                </tr>
            {% endfor %}
        </tbody>
        
    </table>
    <table border=1px solid #FF0000;>
        <caption><strong>Lowest Votes </Strong></caption>
        <thead>
            <tr>
                <th scope="col">Year</th>
                <th scope="col">State</th>
                <th scope="col">Votes</th>
                <th scope="col">Party</th>
                
            </tr>
        </thead>
        <tbody>
            {% for row in data2 %}
                <tr>
                    <td>{{ row[0] }}</td>
                    <td>{{ row[1] }}</td>
                    <td>{{ row[2] }}</td>
                    <td>{{ row[3] }}</td>
                    
                </tr>
            {% endfor %}
        </tbody>
        
    </table>
</div>
{%endblock table%}
{%elif opt=='2'%}
<p align = center style=color:blue> Time taken to execute {{noq}} queries with REDIS is {{toe}} secs</p>
<p align = center style=color:blue> {{count}} records found in the specified range</p>
<div align=center>
    {%block table1%}
    <table border=1px solid #FF0000;>
        <caption><strong>Votes records</Strong></caption>
        <thead>
            <tr>
                <th scope="col">Year</th>
                <th scope="col">State</th>
                <th scope="col">Votes</th>
                <th scope="col">Party</th>
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
                <tr>
                    <td>{{ row[0] }}</td>
                    <td>{{ row[1] }}</td>
                    <td>{{ row[2] }}</td>
                    <td>{{ row[3] }}</td>
              
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <table border=1px solid #FF0000;>
        <caption><strong>Highest Votes </Strong></caption>
        <thead>
            <tr>
                <th scope="col">Year</th>
                <th scope="col">State</th>
                <th scope="col">Votes</th>
                <th scope="col">Party</th>
                
            </tr>
        </thead>
        <tbody>
            {% for row in data1 %}
                <tr>
                    <td>{{ row[0] }}</td>
                    <td>{{ row[1] }}</td>
                    <td>{{ row[2] }}</td>
                    <td>{{ row[3] }}</td>
                    
                </tr>
            {% endfor %}
        </tbody>
        
    </table>
    <table border=1px solid #FF0000;>
        <caption><strong>Lowest Votes </Strong></caption>
        <thead>
            <tr>
                <th scope="col">Year</th>
                <th scope="col">State</th>
                <th scope="col">Votes</th>
                <th scope="col">Party</th>
                
            </tr>
        </thead>
        <tbody>
            {% for row in data2 %}
                <tr>
                    <td>{{ row[0] }}</td>
                    <td>{{ row[1] }}</td>
                    <td>{{ row[2] }}</td>
                    <td>{{ row[3] }}</td>
                    
                </tr>
            {% endfor %}
        </tbody>
        
    </table>
</div>
{%endblock table1%}
{%endif%}
{% endblock content %}
@app.route("/")
def task1():
    return render_template("task1.html")

@app.route("/result1", methods=["GET", "POST"])
def result1():
    formdata = dict(request.form)
    l1 = float(formdata['l1'])
    l2 = float(formdata['l2'])
    v1 = int(formdata['v1'])
    v2 = int(formdata['v2'])
    n = int(formdata['n'])  
    opt = request.form.get('opt')

    if(opt=='1'):
        start = time.time()
        for i in range(0,n):
            cr.execute("select * from pvotes where year>? and year<? and votes>? and votes<? order by votes desc",l1,l2,v1,v2)
            res = cr.fetchall()
            
        toe = time.time() - start
        res1 = res[:1]
        res2 = res[-1:]
    elif(opt=='2'):
        toe = 0
        for i in range(0,n):
            query = f"select * from pvotes where year>{l1} and year<{l2} and votes>{v1} and votes<{v2} ORDER BY votes desc"
            hash = hashlib.sha224(query.encode('utf-8')).hexdigest()
            if (redis_cache.get(hash)):
                print(f"cached value {i}") 
                start=time.time()               
                res = redis_cache.get(hash)
                toe = toe+ (time.time()-start)
                cr.execute("select * from pvotes where year>? and year<? and votes>? and votes<? ",l1,l2,v1,v2)
                res = cr.fetchall()
                
                print("fetched from cache")
            else:
                start = time.time()
                data = cr.execute(query)
                res = data.fetchall()
                redis_cache.set(hash, len(res))
                redis_cache.expire(hash,30) 
                toe = toe+ (time.time() - start) 
                cr.execute("select * from pvotes year>? and year<? and votes>? and votes<? ",l1,l2,v1,v2)
                res = cr.fetchall()                  
                print("fetched from db")
        print(toe)
        res1 = res[:1]
        res2 = res[-1:]
    return render_template("result1.html", noq = n, toe = toe, opt=opt, data=res,data1 = res1,data2= res2, count=len(res))


 11. (a) Allow a user to give a range of years, and for all votes in all states within that range, 
         calculate total votes (sum) for each candidate, for that state and list (similar to previous question).

@app.route("/task3")
def task3():
    return render_template("task3.html")

@app.route("/result3", methods=["GET", "POST"])
def result3():
    formdata = dict(request.form)
    s1 = str(formdata['s1'])
    s2 = str(formdata['s2'])
   
    n = int(formdata['n'])  
    #r = int(formdata['r'])
    opt = request.form.get('opt')

    if(opt=='1'):
        start = time.time()
        for i in range(0,n):
            cr.execute("SELECT year,state,sum(votes),party FROM pvotes where year BETWEEN '"+s1+"' and '"+s2+"'  group by party,state,year")
            res = cr.fetchall()
        toe = time.time() - start

    elif(opt=='2'):
        toe = 0
        for i in range(0,n):
            query = f"select year,state,sum(votes),party FROM pvotes where year>{s1} and year<{s2} group by party,state,year"
            hash = hashlib.sha224(query.encode('utf-8')).hexdigest()
            if (redis_cache.get(hash)):
                print(f"cached value {i}") 
                start=time.time()               
                res = redis_cache.get(hash)
                toe = toe+ (time.time()-start)
                data = cr.execute("SELECT year,state,sum(votes),party FROM pvotes where year BETWEEN '"+s1+"' and '"+s2+"'  group by party,state,year")
                res = data.fetchall()
                print("fetched from cache")
            else:
                start = time.time()
                data = cr.execute("SELECT year,state,sum(votes),party FROM pvotes where year BETWEEN '"+s1+"' and '"+s2+"'  group by party,state,year")
                res = data.fetchall()
                print("from db")
                print(res)
                redis_cache.set(hash, len(res))
                redis_cache.expire(hash,30) 
                toe = toe+ (time.time() - start)                   
                print("fetched from db")
        print(toe)
    return render_template("result3.html", noq = n, toe = toe, opt=opt, data=res, count=len(res))
     (b) Allow a user to give a number N (for example 6), and randomly select N of those years selected by part (a),
         and list. (Since the years are from 1976 to 2020, if you need to convert to a form 1,2, etc. You can 
         (take any year - 1976)/4 + 1. Or similar.)

@app.route("/task2")
def task2():
    return render_template("task2.html")

@app.route("/result2", methods=["GET", "POST"])
def result2():
    formdata = dict(request.form)
    s1 = str(formdata['s1'])
    s2 = str(formdata['s2'])
   
    n = int(formdata['n'])  
    r = int(formdata['r'])
    opt = request.form.get('opt')

    if(opt=='1'):
        start = time.time()
        for i in range(0,n):
            cr.execute("SELECT year,state,sum(votes),party FROM pvotes where year BETWEEN '"+s1+"' and '"+s2+"'  group by party,state,year order by Rand()")
            res = cr.fetchall()
        toe = time.time() - start
        res1=res[0:r]

    elif(opt=='2'):
        toe = 0
        for i in range(0,n):
            query = f"select year,state,sum(votes),party FROM pvotes where year>{s1} and year<{s2} group by party,state,year order by Rand()"
            hash = hashlib.sha224(query.encode('utf-8')).hexdigest()
            if (redis_cache.get(hash)):
                print(f"cached value {i}") 
                start=time.time()               
                res = redis_cache.get(hash)
                toe = toe+ (time.time()-start)
                data = cr.execute("SELECT year,state,sum(votes),party FROM pvotes where year BETWEEN '"+s1+"' and '"+s2+"'  group by party,state,year order by Rand()")
                res = data.fetchall()
                print("fetched from cache")
            else:
                start = time.time()
                data = cr.execute("SELECT year,state,sum(votes),party FROM pvotes where year BETWEEN '"+s1+"' and '"+s2+"'  group by party,state,year order by Rand()")
                res = data.fetchall()
                print("from db")
                print(res)
                redis_cache.set(hash, len(res))
                redis_cache.expire(hash,30) 
                toe = toe+ (time.time() - start)                   
                print("fetched from db")
            res1=res[0:r]
        print(toe)
    return render_template("result2.html", noq = n, toe = toe, opt=opt, data=res1, count=len(res))

    Please show the time to do those queries.

 12. A user will give you the number of times to do the "query", you will do both of the previous questions that number of times 
     and show the results as well as the total time taken. 

 13. Repeat the previous question using (in addition to the database) an in-memory caching mechanism 
     (NOT an in-memory database) then show us.

 14. Show us, in a link, the application running and we will try it out. Only for parts 10, 11, 12, 13

 15. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

